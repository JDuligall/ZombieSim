package main;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.swing.JFrame;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import mapContents.Nd;
import mapContents.Node;
import mapContents.Osm;
import mapContents.Way;
import mapDrawable.ZombieDot;

import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;

import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;

public class MapViewer {
	
	private List<Thread> threads = new ArrayList<Thread>();
	private List<Runnable> runnables = new ArrayList<Runnable>();
	static private JMapViewer map;
	private JFrame frame;
	private Osm param;
	private HashMap<BigInteger, Coordinate> locations;
	private HashMap<Way,ArrayList<Nd>> ways;
	private ArrayList<Node> nodes;
	ExecutorService executorService;
	private HashMap<BigInteger, Node> refNodes;
	
	public MapViewer(){
		
		param = null;
		nodes = new ArrayList<Node>();
		locations = new HashMap<BigInteger, Coordinate>();
		ways = new HashMap<Way,ArrayList<Nd>>();
		refNodes = new HashMap<BigInteger, Node>();
		
		executorService = Executors.newFixedThreadPool(100);
		
		setUpFrame();
		readXML();
		doStuffTest();
		
	}

	private void doStuffTest() {
		
		readOSMFile();

		 
		 for(int i = 0; i < 50000; i++){
			 Coordinate crd = new Coordinate(nodes.get(i).getLat(),nodes.get(i).getLon());
			 MapMarker test = new ZombieDot(crd, nodes.get(i),map);
			 Runnable run = (Runnable)test;
			 this.runnables.add(run);
			 Thread thread = new Thread((Runnable) test);
			 this.threads.add(thread);
			 //executorService.submit(run);			 
			 map.addMapMarker(test);
		 }
		 
		 //dont render stuff off screen
		 //dont render past certain zoom level
		 
		 startSim();
		
	}

	private void readOSMFile() {
		// read through the OSM file to get the contents
		List<Object> contents = param.getBoundOrUserOrPreferences();
		for (int i = 0; i < contents.size(); i++) {
			Object cur = contents.get(i);
			
			if (cur.getClass().equals((mapContents.Node.class))) {
				Node curNode = (Node)cur;
				nodes.add(curNode);
				refNodes.put(curNode.getId(), curNode);
				locations.put(curNode.getId(), new Coordinate(curNode.getLat(),curNode.getLon()));
				
				
			} else if (cur.getClass().equals((mapContents.Way.class))) {
				Way way = (Way) contents.get(i);
				
				
				List<Object> wayNodes = way.getRest();
				ArrayList<Nd> nds = new ArrayList<Nd>();

				for (int j = 0; j < wayNodes.size(); j++) {
					Object current = wayNodes.get(j);
					
					if(current.getClass().equals(mapContents.Nd.class)){
						
						Nd curNd = (Nd)current;
						nds.add(curNd);
						
					}//else if (current.getClass().equals(Tag.class)) {
//						Tag t = (Tag) wayNodes.get(j);
//						if (t.getV().equals("Buckle Street")) {
//							myStreet = way;
//							break;
//						}
//					}
					
				}
				
				ways.put(way,nds);

			}
		}
		
		//iterate through ways and set each node to have its neighbours
		 Iterator waysIt = ways.entrySet().iterator();
		 while(waysIt.hasNext()){
			 Map.Entry pair = (Entry) waysIt.next();
			 ArrayList<Nd> pairNds = (ArrayList<Nd>) pair.getValue();
			 
			 for(int i = 0; i < pairNds.size(); i++){
				 BigInteger ref = pairNds.get(i).getRef();
				 
				 Node n = refNodes.get(ref);
				 
				 if(0 < i){
					 BigInteger n1Ref = pairNds.get(i-1).getRef();
					 n.addNeighbour(refNodes.get(n1Ref));
				 }
				 
				 if(i <= pairNds.size()-2){
					 BigInteger n2Ref = pairNds.get(i+1).getRef();
					 n.addNeighbour(refNodes.get(n2Ref));
				 }
				 
			 }	 
		 }
	}

	private void startSim() {
		frame.add(map);
		frame.setVisible(true);
		
		
		while(true){
			step();
			try {
				Thread.sleep(10);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
	}

	private void setUpFrame() {
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(800, 800);
		map = new JMapViewer();
		
		//TODO set position relative to what has been read in
		map.setDisplayPosition(new Coordinate(-41.299278259277344, 174.7796173095703), 10);
	}

	private void readXML() {
		try {
			JAXBContext context = JAXBContext.newInstance(Osm.class);
			Unmarshaller unMarshaller = context.createUnmarshaller();
			param = (Osm) unMarshaller.unmarshal(new FileInputStream(
					"../../mapFiles/map.osm"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

	public void step(){
//		for(Thread t : threads){
//			t.run();
//			map.repaint();
//		}
		for(Runnable r : runnables){
			executorService.submit(r);
			if(((MapMarker)r).isVisible()){
				map.repaint();
			}
		}
	}
	
	public static void main(String[] args) {
		new MapViewer();
	}
	
}






//STUFF THAT WAS UNDER readOSMFile()=========================================================================================

//Setting up the test street(outside ma house)
//List<Object> myStreetTags = myStreet.getRest();
//ArrayList<Nd> nds = new ArrayList<Nd>();
//ArrayList<Coordinate> coords = new ArrayList<Coordinate>();
//
//for(int i = 0;i<myStreetTags.size();i++){
//	Object cur = myStreetTags.get(i);
//	if(cur.getClass().equals(mapContents.Nd.class)){
//		Nd curNd = (Nd)cur;
//		nds.add(curNd);
//		coords.add(locations.get(curNd.getRef()));
//	}
//}

 //drawing a rectangle around the OSM map area.
		 
 //<bounds minlat="-41.2994300" minlon="174.7788100" maxlat="-41.2989000" maxlon="174.7796000"/>
// MapRectangleImpl rect = new MapRectangleImpl(new Coordinate(-41.2984300,174.7768100), new Coordinate(-41.2999000,174.7806000));
// map.addMapRectangle(rect);		 
 
 
 
/*		 //test seeing nodes
 for(Node n:nodes){
	 MapMarkerDot marker = new MapMarkerDot(new Coordinate(n.getLat(),n.getLon()));
	map.addMapMarker(marker);
 }
 
 //test joints between nodes
 
 ArrayList<MapPolyLine> lines = new ArrayList<MapPolyLine>();
 
 for(Node n: nodes){
	 Coordinate nC = new Coordinate(n.getLat(),n.getLon());
	 for(Node n1: n.getNeighbours()){
		 Coordinate n1C = new Coordinate(n1.getLat(), n1.getLon());
		 ArrayList<Coordinate> coords = new ArrayList<Coordinate>();
		 coords.add(nC);
		 coords.add(n1C);
		 coords.add(n1C);
		 lines.add(new MapPolyLine(coords));
	 }
 }
 
 for(MapPolyLine line:lines){
	 map.addMapPolygon(line);
 }
 
 ArrayList<Coordinate> foo = new ArrayList<Coordinate>();
 foo.add(new Coordinate(1,1));
 foo.add(new Coordinate(2,2));
 foo.add(new Coordinate(3,3));
 map.addMapPolygon(new MapPolyLine(foo));
 
 
 
 // rudimentary implementation of only showing map contents after a certain zoom level. 
 map.addMouseWheelListener(new MouseWheelListener() {
	
	@Override
	public void mouseWheelMoved(MouseWheelEvent e) {
		if(map.getZoom() > 15){
			map.addMapPolygon(zombie);
		 	//map.addMapPolygon(polygon1);
		 }else{
			 map.removeMapPolygon(zombie);
			 //map.removeMapPolygon(polygon1);
		 }
		
	}
});

// store all the nodes in a list so i can get the coordinates using the
// reference. ------------DONE its called locations

 //Makes the zombie and thread for zombie
 ArrayList<Coordinate> crds = new ArrayList<Coordinate>();

 
 Zombie zombie = new Zombie(map,nodes.get(1));
 
 Thread thread = new Thread(zombie);
 this.threads.add(thread);//Adds thread to loop set
 
 MapMarker marker =  new MapMarkerDot(crd);
 //map.addMapMarker(marker);
 
 MapPolyLine mpl = new MapPolyLine(crds);
 map.addMapPolygon(mpl);
 
 map.addMapPolygon(zombie);
 
 //testing neigbhours
 Node testNode = nodes.get(1);
 MapMarker tnmm = new MapMarkerDot(new Coordinate(testNode.getLat(),testNode.getLon()));
 map.addMapMarker(tnmm);
 
 for(Node n:testNode.getNeighbours()){
	 MapMarker foo = new MapMarkerDot(new Coordinate(n.getLat(),n.getLon()));
	 map.addMapMarker(foo);
 }*/

//the road
//MapPolyLine polygon1 = new MapPolyLine(coords);
//polygon1.setColor(Color.red);
//polygon1.setBackColor(Color.red);
